{"/tmp/npmtest/node-npmtest-nodepdf/test.js":"/* istanbul instrument in package npmtest_nodepdf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/tmp/npmtest/node-npmtest-nodepdf/lib.npmtest_nodepdf.js":"/* istanbul instrument in package npmtest_nodepdf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nodepdf = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nodepdf = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/tmp/npmtest/node-npmtest-nodepdf/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nodepdf && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nodepdf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nodepdf\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nodepdf.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nodepdf.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nodepdf.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nodepdf.__dirname + '/lib.npmtest_nodepdf.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/tmp/npmtest/node-npmtest-nodepdf/node_modules/nodepdf/index.js":"'use strict';\n\nvar child = require('./child.js');\nvar Emitter = require('events').EventEmitter;\n\nvar defaults = {\n  'viewportSize': {\n    'width': 2880,\n    'height': 1440\n  },\n  'paperSize': {\n    'format': 'A4',\n    'orientation': 'portrait',\n    'margin': {\n      'top': '1cm',\n      'right': '1cm',\n      'bottom': '1cm',\n      'left': '1cm'\n    }\n  },\n  'outputQuality': '80', //0 to 100\n  'zoomFactor': 1,\n  'args': '',\n  'captureDelay': 400\n};\n\n//code from https://github.com/rxaviers/cldr\nvar merge = function() {\n  var destination = {},\n\n  sources = [].slice.call(arguments, 0);\n  sources.forEach(function(source) {\n    var prop;\n\n    for (prop in source) {\n      if (prop in destination && Array.isArray(destination[prop])) {\n        // Concat Arrays\n        destination[prop] = destination[prop].concat(source[prop]);\n      } else if (prop in destination && typeof destination[prop] === \"object\") {\n        // Merge Objects\n        destination[prop] = merge(destination[prop], source[prop] );\n      } else {\n        // Set new values\n        destination[prop] = source[prop];\n      };\n    };\n  });\n\n  return destination;\n};\n\n/**\n *  Constructor interface\n */\n\nvar exports = module.exports = Pdf;\n\nfunction Pdf (url, fileName, opts){\n  var self = this;\n\n  this.url = url;\n  this.fileName = fileName;\n  this.filePath = process.env.PWD || process.cwd() || __dirname;\n  this.options = merge(defaults, opts);\n\n  child.supports(function(support){\n    if (!support) self.emit('error', 'PhantomJS not installed');\n    if (support) self.run();\n  });\n\n  return this;\n};\n\n/**\n *  Inherit the event emitter\n */\n\nPdf.prototype = Object.create(Emitter.prototype);\n\n/**\n *  Run the process\n *\n *  @method run\n */\n\nPdf.prototype.run = function() {\n  var self = this;\n  child.exec(this.url, this.fileName, this.options, function (ps) {\n    ps.on('exit', function(c, d){\n      if (c != 0) return self.emit('error', 'PDF conversion failed with exit of '+c);\n\n      var targetFilePath = self.fileName;\n\n      if (targetFilePath[0] != '/') {\n        targetFilePath = self.filePath + '/' + targetFilePath;\n      };\n\n      self.emit('done', targetFilePath);\n    });\n\n    ps.stdout.on('data', function(std){\n      self.emit('stdout', std);\n    });\n\n    ps.stderr.on('data', function(std){\n      self.emit('stderr', std);\n    });\n  });\n};\n\n/**\n *  Use callback style rendering\n *\n *  @param {String} address\n *  @param {String} file\n *  @param {Options} address\n *  @param {Function} callback\n */\n\nexports.render = function(address, file, options, callback) {\n  var filePath = process.env.PWD || process.cwd() || __dirname;\n\n  if (typeof options == 'function') {\n    callback = options;\n    options = defaults;\n  };\n\n  options = merge(defaults, options);\n\n  child.supports(function(support){\n    if (!support) callback(new Error('PhantomJS not installed'));\n\n    child.exec(address, file, options, function (ps) {\n      ps.on('exit', function(c, d){\n        if (c) return callback(new Error('Conversion failed with exit of '+c));\n\n        var targetFilePath = file;\n\n        if (targetFilePath[0] != '/')\n          targetFilePath = filePath + '/' + targetFilePath;\n\n        return callback(null, targetFilePath);\n      });\n    });\n  });\n};\n","/tmp/npmtest/node-npmtest-nodepdf/node_modules/nodepdf/child.js":"'use strict';\n\nvar child = require('child_process');\nvar shq = require('shell-quote').quote;\nvar which = process.platform == 'win32' ? 'where' : 'which';\nvar fs = require('fs');\n\n/**\n *  Execute the command\n *\n *  @param {String} url\n *  @param {String} filename\n *  @param {Object} options\n *  @param {Function} [cb]\n */\nexports.exec = function(url, filename, options, cb){\n  var key;\n  var stdin = ['phantomjs'];\n  var optsFile = __dirname + '/' + Date.now() + '.js';\n\n  stdin.push(options.args);\n  stdin.push(shq([\n    __dirname+'/render.js',\n    url,\n    filename,\n    optsFile,\n  ]));\n\n  fs.writeFile(optsFile, 'module.exports='+JSON.stringify(options), 'UTF-8', function(err) {\n    if(err) {\n      return console.log(err);\n    }\n\n    var c = child.exec(stdin.join(' '));\n    c.on('exit', function () {\n      fs.unlinkSync(optsFile);\n    });\n\n    c.on('error', function () {\n      fs.unlinkSync(optsFile);\n    });\n    cb(c);\n  });\n};\n\n/**\n *  Check to see if the environment has a command\n */\n\nexports.supports = function(cb, cmd) {\n  var stream = child.exec(which+' '+(cmd || 'phantomjs'), function(err, stdo, stde){\n    return cb(!!stdo.toString());\n  });\n};\n","/tmp/npmtest/node-npmtest-nodepdf/node_modules/nodepdf/render.js":"var page = require('webpage').create();\nvar system = require('system');\n\n// ADDRESS CHANGE IN PARAMETERS HANDLING FOR PHANTOMJS 2.x\nvar phantomargs;\nif(phantom.version.major >= 2) {\n  // remove the script name from the arguments\n  phantomargs = system.args.slice(1,system.args.length);\n} else {\n  phantomargs = phantom.args;\n}\n\nvar contentsCb = function(pobj) {\n  if (!pobj || !pobj.contents) return;\n  var contentStr = pobj.contents;\n  pobj.contents = phantom.callback(function(currentPage, pages) {\n    return contentStr.replace(/\\{currentPage\\}/g, currentPage).replace(/\\{pages\\}/g, pages);\n  });\n};\n\nvar args;\n\nif (phantom.args) {\n    args = phantom.args\n} else {\n    args = require('system').args;\n}\n\nif (args.length < 2) {\n  console.log('11');\n  console.log('incorrect args');\n  phantom.exit();\n} else {\n  var optionsFile = args[3];\n  var options = require(optionsFile);\n\n  contentsCb(options.paperSize.header);\n  contentsCb(options.paperSize.footer);\n\n  if (options.cookies) {\n    options.cookies.forEach(page.addCookie);\n    delete options.cookies;\n  }\n\n  for (var key in options) {\n    if (options.hasOwnProperty(key) && page.hasOwnProperty(key)) {\n      page[key] = options[key];\n    }\n  }\n\n  if (!options.content) page.open(args[0]);\n\n  page.onLoadFinished = function(status) {\n    if(status !== 'success'){\n      console.log('error: ' + status);\n      console.log('unable to load the address!');\n      phantom.exit();\n    } else {\n      window.setTimeout(function(){\n        page.render(args[1], { format: 'pdf', quality: options.outputQuality || '80' });\n        console.log('success');\n        phantom.exit();\n      }, options.captureDelay || 400);\n    };\n  }\n};\n"}